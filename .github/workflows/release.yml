name: Release Module

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '**/.gitignore'
      - '.gitignore'
      - 'LICENSE'
      - 'CODEOWNERS'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'patch'
          - 'minor'
          - 'major'

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  release:
    name: Build and Release Module
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/powershell:7.4-ubuntu-22.04
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify PowerShell Installation
        shell: pwsh
        run: |
          Write-Host "PowerShell Version Information:" -ForegroundColor Green
          $PSVersionTable
          
          Write-Host "`nPowerShell executable location:" -ForegroundColor Green
          Get-Command pwsh | Select-Object Source, Version

      - name: Get Module Information
        id: module_info
        shell: pwsh
        run: |
          Write-Host "Getting module information..." -ForegroundColor Cyan
          
          # Find the module manifest file
          $ManifestFile = Get-ChildItem -Path . -Filter "*.psd1" -Recurse | 
                          Where-Object { $_.Directory.Name -ne 'build' } | 
                          Select-Object -First 1
          
          if (-not $ManifestFile) {
              Write-Error "No module manifest (.psd1) file found!"
              exit 1
          }
          
          Write-Host "Found manifest: $($ManifestFile.FullName)" -ForegroundColor Green
          
          # Import the manifest data
          $ManifestData = Import-PowerShellDataFile -Path $ManifestFile.FullName
          
          # Get module name from manifest
          $ModuleName = $ManifestFile.BaseName
          Write-Host "Module name: $ModuleName" -ForegroundColor Green
          
          # Output module name for later steps
          "MODULE_NAME=$ModuleName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "MODULE_NAME=$ModuleName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Determine Version
        id: version
        shell: pwsh
        run: |
          Write-Host "Determining module version..." -ForegroundColor Cyan
          
          # Get latest release from GitHub API
          $Headers = @{
              'Authorization' = "token $env:GITHUB_TOKEN"
              'Accept' = 'application/vnd.github.v3+json'
          }
          
          $CurrentVersion = "0.0.0"
          $LatestReleaseTag = $null
          
          try {
              $LatestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases/latest" -Headers $Headers
              $CurrentVersion = $LatestRelease.tag_name -replace '^v', ''
              $LatestReleaseTag = $LatestRelease.tag_name
              Write-Host "Latest release found: $CurrentVersion" -ForegroundColor Green
          } catch {
              if ($_.Exception.Response.StatusCode -eq 404) {
                  Write-Host "No releases found, starting with version 1.0.0" -ForegroundColor Yellow
                  $CurrentVersion = "0.0.0"  # Will be bumped to 1.0.0
              } else {
                  Write-Error "Failed to get latest release: $_"
                  exit 1
              }
          }
          
          # Parse current version
          if ($CurrentVersion -match '^(\d+)\.(\d+)\.(\d+)') {
              $Major = [int]$Matches[1]
              $Minor = [int]$Matches[2] 
              $Patch = [int]$Matches[3]
          } else {
              Write-Host "Invalid version format, defaulting to 0.0.0" -ForegroundColor Yellow
              $Major = 0; $Minor = 0; $Patch = 0
          }
          
          # Determine version bump type
          $VersionBump = "${{ github.event.inputs.version_bump }}"
          if ([string]::IsNullOrEmpty($VersionBump) -or $VersionBump -eq "auto") {
              # Analyze commits since last release to determine bump type
              if ($CurrentVersion -eq "0.0.0") {
                  $VersionBump = "major"  # First release
              } else {
                  # Use GitHub API to get commits since last release
                  try {
                      $CommitsUrl = "https://api.github.com/repos/$env:GITHUB_REPOSITORY/commits?sha=$env:GITHUB_SHA"
                      if ($LatestReleaseTag) {
                          # Get the commit SHA for the latest release tag
                          $TagUrl = "https://api.github.com/repos/$env:GITHUB_REPOSITORY/git/refs/tags/$LatestReleaseTag"
                          $TagRef = Invoke-RestMethod -Uri $TagUrl -Headers $Headers
                          $ReleaseCommitSha = $TagRef.object.sha
                          
                          # Get commits between release and current
                          $CompareUrl = "https://api.github.com/repos/$env:GITHUB_REPOSITORY/compare/${ReleaseCommitSha}...${env:GITHUB_SHA}"
                          $Comparison = Invoke-RestMethod -Uri $CompareUrl -Headers $Headers
                          $Commits = $Comparison.commits
                          
                          Write-Host "Analyzing $($Commits.Count) commits for version bump..." -ForegroundColor Cyan
                          
                          if ($Commits.Count -gt 0) {
                              Write-Host "Commits since last release:" -ForegroundColor Yellow
                              $Commits | ForEach-Object { Write-Host "  $($_.commit.message.Split("`n")[0])" }
                              
                              # Analyze commit messages
                              $CommitMessages = $Commits.commit.message -join " "
                              
                              if ($CommitMessages -match '(?i)(breaking|major|!:|BREAKING CHANGE)') {
                                  $VersionBump = "major"
                                  Write-Host "Detected breaking changes - major version bump" -ForegroundColor Red
                              } elseif ($CommitMessages -match '(?i)(feat|feature|add|new)') {
                                  $VersionBump = "minor" 
                                  Write-Host "Detected new features - minor version bump" -ForegroundColor Blue
                              } else {
                                  $VersionBump = "patch"
                                  Write-Host "Detected fixes/improvements - patch version bump" -ForegroundColor Green
                              }
                          } else {
                              Write-Host "No new commits found, defaulting to patch version bump" -ForegroundColor Yellow
                              $VersionBump = "patch"
                          }
                      } else {
                          Write-Host "No previous release tag found, defaulting to patch version bump" -ForegroundColor Yellow
                          $VersionBump = "patch"
                      }
                  } catch {
                      Write-Host "Could not analyze commits via API, defaulting to patch version bump" -ForegroundColor Yellow
                      Write-Host "Error: $_" -ForegroundColor Yellow
                      $VersionBump = "patch"
                  }
              }
          }
          
          # Calculate new version
          switch ($VersionBump) {
              "major" { 
                  $Major++; $Minor = 0; $Patch = 0 
                  Write-Host "Performing major version bump" -ForegroundColor Red
              }
              "minor" { 
                  $Minor++; $Patch = 0 
                  Write-Host "Performing minor version bump" -ForegroundColor Blue
              }
              "patch" { 
                  $Patch++ 
                  Write-Host "Performing patch version bump" -ForegroundColor Green
              }
              default {
                  Write-Error "Invalid version bump type: $VersionBump"
                  exit 1
              }
          }
          
          $NewVersion = "$Major.$Minor.$Patch"
          Write-Host "New version will be: $NewVersion" -ForegroundColor Cyan
          
          # Set environment variables
          "PSModuleVersion=$NewVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          "NEW_VERSION=$NewVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "VERSION_BUMP=$VersionBump" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Release Module
        shell: pwsh
        run: |
          Write-Host "Building module for release..." -ForegroundColor Cyan
          Write-Host "Target version: $env:PSModuleVersion" -ForegroundColor Green
          
          # Execute build script in Ship mode
          .\build.ps1 -Mode Ship -Verbose
          
          Write-Host "Release build completed successfully!" -ForegroundColor Green

      - name: Create Release Archive
        shell: pwsh
        run: |
          Write-Host "Creating release archive..." -ForegroundColor Cyan
          
          # Use the module name from earlier step
          $ModuleName = $env:MODULE_NAME
          $ArchiveName = "$ModuleName-v$env:PSModuleVersion.zip"
          
          # Create zip archive of only the build output contents
          Push-Location "build/output"
          Compress-Archive -Path "*" -DestinationPath "../../$ArchiveName" -Force
          Pop-Location
          
          Write-Host "Created archive: $ArchiveName" -ForegroundColor Green
          "ARCHIVE_NAME=$ArchiveName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create NuGet Package
        shell: pwsh
        run: |
          Write-Host "Creating NuGet package..." -ForegroundColor Cyan
          
          # Install NuGet provider if not present
          if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
              Write-Host "Installing NuGet provider..." -ForegroundColor Yellow
              Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser
          }
          
          # Register PSGallery if not already registered
          if (-not (Get-PSRepository -Name PSGallery -ErrorAction SilentlyContinue)) {
              Write-Host "Registering PSGallery repository..." -ForegroundColor Yellow
              Register-PSRepository -Default
          }
          
          # Create a temporary directory for the package
          $TempPackageDir = New-Item -ItemType Directory -Path "temp_package" -Force
          
          # Copy module files to temp directory
          Copy-Item -Path "build/output/*" -Destination $TempPackageDir -Recurse -Force
          
          # Create the NuGet package
          $NupkgPath = "$env:MODULE_NAME.$env:PSModuleVersion.nupkg"
          
          Write-Host "Building NuGet package: $NupkgPath" -ForegroundColor Green
          
          # Create .nuspec file
          $NuspecContent = @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2011/10/nuspec.xsd">
            <metadata>
              <id>$env:MODULE_NAME</id>
              <version>$env:PSModuleVersion</version>
              <authors>$env:GITHUB_REPOSITORY_OWNER</authors>
              <owners>$env:GITHUB_REPOSITORY_OWNER</owners>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <description>PowerShell module $env:MODULE_NAME</description>
              <releaseNotes>See https://github.com/$env:GITHUB_REPOSITORY/releases/tag/v$env:PSModuleVersion</releaseNotes>
              <copyright>Copyright (c) $((Get-Date).Year) $env:GITHUB_REPOSITORY_OWNER</copyright>
              <repository type="git" url="https://github.com/$env:GITHUB_REPOSITORY.git" />
            </metadata>
          </package>
          "@
          
          $NuspecPath = Join-Path $TempPackageDir "$env:MODULE_NAME.nuspec"
          $NuspecContent | Out-File -FilePath $NuspecPath -Encoding UTF8
          
          # Use Compress-Archive to create the nupkg (which is just a zip file)
          Compress-Archive -Path "$TempPackageDir/*" -DestinationPath $NupkgPath -Force
          
          Write-Host "NuGet package created: $NupkgPath" -ForegroundColor Green
          
          # Set package path for next steps
          "NUPKG_PATH=$NupkgPath" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Publish to GitHub Packages
        shell: pwsh
        run: |
          Write-Host "Publishing to GitHub Packages..." -ForegroundColor Cyan
          
          # Configure NuGet source for GitHub Packages
          $SourceUrl = "https://nuget.pkg.github.com/$env:GITHUB_REPOSITORY_OWNER/index.json"
          
          # Install dotnet CLI if not present
          if (-not (Get-Command dotnet -ErrorAction SilentlyContinue)) {
              Write-Host "Installing .NET SDK..." -ForegroundColor Yellow
              apt-get update
              apt-get install -y dotnet-sdk-6.0
          }
          
          # Add GitHub Packages as a source
          Write-Host "Adding GitHub Packages source..." -ForegroundColor Yellow
          dotnet nuget add source $SourceUrl --name github --username $env:GITHUB_REPOSITORY_OWNER --password $env:GITHUB_TOKEN --store-password-in-clear-text
          
          # Push the package
          Write-Host "Pushing package to GitHub Packages..." -ForegroundColor Green
          dotnet nuget push $env:NUPKG_PATH --api-key $env:GITHUB_TOKEN --source github --skip-duplicate
          
          Write-Host "Package published successfully!" -ForegroundColor Green
          Write-Host "Package URL: https://github.com/$env:GITHUB_REPOSITORY/packages" -ForegroundColor Cyan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          name: ${{ env.MODULE_NAME }} v${{ steps.version.outputs.NEW_VERSION }}
          body: |
            ## 📦 Installation
            
            ### From GitHub Packages
            ```powershell
            # Register GitHub Packages source (one-time setup)
            Register-PSResourceRepository -Name GitHub -Uri https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
            
            # Install the module
            Install-PSResource -Name ${{ env.MODULE_NAME }} -Repository GitHub -Version ${{ steps.version.outputs.NEW_VERSION }}
            ```
            
            ### Manual Installation
            Download the attached zip file and extract to your PowerShell modules directory.
            
            ---
            *This release was automatically generated by GitHub Actions*
          draft: false
          prerelease: false
          files: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.NUPKG_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}